#! /usr/bin/env python
# -*- coding: utf-8 -*-

from Audio import *

import sys
import getopt
import requests
import time


#klasa Ticker pobiera dane z serwera i wyświetla je w konsoli
class Ticker(object):
	def __init__(self, url):
		self.url = url
		self.data = ()
	def get(self, user_timeout = 30):
		try:
			self.data = requests.get(self.url, timeout = user_timeout).json()
		except:
			print "Błąd: Brak połączenia z serwerem !!!"
		else:	
			return self.data

#klasa Stock - nadklasa, ogólny opis giełdy, dziedziczą po niej klasy wyspecjalizowane do obsługi poszczególnych giełd
class Stock(object):
	def __init__(self, url):
		self.Ticker = Ticker(url)

#klasa Bitcurex - klasa zawierająca metody do obsługi tej giełdy
class Bitcurex(Stock):
	def __init__(self, url):
		Stock.__init__(self, url)
	
	#metody pobierająca dane z Tickera
	def get_ask(self):
		return self.Ticker.data['sell']
	
	def get_bid(self):
		return self.Ticker.data['buy']
	
	def get_high(self):
		return self.Ticker.data['high']
	
	def get_low(self):
		return self.Ticker.data['low']
	
	def get_last(self):
		return self.Ticker.data['last']
	
	def get_vwap(self):
		return self.Ticker.data['vwap']
	
	def get_volume(self):
		return self.Ticker.data['vol']
	
	def get_time(self):
		return self.Ticker.data['time']

#klasa Bitstamp - klasa zawierająca metody do obsługi tej giełdy
class Bitstamp(Stock):
	def __init__(self, url):
		Stock.__init__(self, url)
	
	#metody pobierająca dane z Tickera
	def get_ask(self):
		return self.Ticker.data['ask']
	
	def get_bid(self):
		return self.Ticker.data['bid']
	
	def get_high(self):
		return self.Ticker.data['high']
	
	def get_low(self):
		return self.Ticker.data['low']
	
	def get_last(self):
		return self.Ticker.data['last']
	
	def get_vwap(self):
		return self.Ticker.data['vwap']
	
	def get_volume(self):
		return self.Ticker.data['volume']
	
	def get_time(self):
		return self.Ticker.data['timestamp']

#klasa BTCe - klasa zawierająca metody do obsługi tej giełdy
class BTCe(Stock):
	def __init__(self, url):
		Stock.__init__(self, url)
	
	#metody pobierająca dane z Tickera
	def get_ask(self):
		return self.Ticker.data['ticker']['buy']
	
	def get_bid(self):
		return self.Ticker.data['ticker']['sell']
	
	def get_high(self):
		return self.Ticker.data['ticker']['high']
	
	def get_low(self):
		return self.Ticker.data['ticker']['low']
	
	def get_last(self):
		return self.Ticker.data['ticker']['last']
	
	def get_vwap(self):
		return self.Ticker.data['ticker']['avg']
	
	def get_volume(self):
		return self.Ticker.data['ticker']['vol_cur']
	
	def get_time(self):
		return self.Ticker.data['ticker']['server_time']



#testowanie
if __name__ == "__main__":
	
	from Analysis import *
	
	gielda = Bitcurex("https://pln.bitcurex.com/data/ticker.json")
	gielda2 = Bitstamp("https://www.bitstamp.net/api/ticker/")
	gielda3 = BTCe("https://btc-e.com/api/2/btc_usd/ticker")
	
	analiza = Analysis()
	
	gielda.Ticker.get()
	print 'Bitcurex: ',gielda.get_last(),'Rekomendacja ',analiza.price_limits(gielda.get_last(), 1400, 1402),'\n'
	
	gielda2.Ticker.get()
	print 'Bitstamp: ',gielda2.get_last(),'Rekomendacja ',analiza.price_limits(gielda2.get_last(), 450, 452),'\n'
	
	gielda3.Ticker.get()
	print 'Btce: ',gielda3.get_last(),'Rekomendacja ',analiza.price_limits(gielda3.get_last(), 450, 452),'\n'




